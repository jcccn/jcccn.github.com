<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jcccn]]></title>
  <link href="http://jcccn.github.com/atom.xml" rel="self"/>
  <link href="http://jcccn.github.com/"/>
  <updated>2013-01-31T00:20:24+08:00</updated>
  <id>http://jcccn.github.com/</id>
  <author>
    <name><![CDATA[jcccn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android程序如何实现换肤？]]></title>
    <link href="http://jcccn.github.com/blog/skins-on-android/"/>
    <updated>2012-07-16T11:51:00+08:00</updated>
    <id>http://jcccn.github.com/blog/skins-on-android</id>
    <content type="html"><![CDATA[<p>安卓上换肤可以通过那些方式来实现呢？</p>

<p>源码下载地址：<a href="http://www.kuaipan.com.cn/file/id_80676665698552.htm">http://www.kuaipan.com.cn/file/id_80676665698552.htm</a></p>

<h4>方式一：切换程序的语言版本。</h4>

<ul>
<li><p>原理：系统根据一定的规则去资源文件夹res下寻找资源。通过改变程序的配置（比如语言或者地区），就能加载不同资源文件夹下面的资源，从而实现简单的换肤。</p></li>
<li><p>实践：举例说明，我要通过中文(系统默认)和英文两个语言版本来实现换肤。首先增加两个资源文件夹drawable-en-mdpi和layout-en，如下图。当在默认的中文环境下，使用的是drawable-mdpi和layout下面的资源。切换至英文环境之后，程序则会使用drawable-en-mdpi和layout-en下面的资源，在这两个文件夹下找不到的时候才去使用默认的drawable-mdpi和layout下面的资源。
<img src="http://jcccn-wordpress.stor.sinaapp.com/uploads/2012/06/skin-test-1.png" alt="http://jcccn-wordpress.stor.sinaapp.com/uploads/2012/06/skin-test-1.png" /></p></li>
</ul>


<p>要实现语言环境的切换，同时不改变系统的语言环境，我们就要改变当前应用的语言，使用Resources实例的updateConfiguration方法即可。示例代码如下：</p>

<p><code>changeLanguage(Locale.ENGLISH);
private void changeLanguage(Locale newLocale) {
Resources resources = getResources();
Configuration config = resources.getConfiguration();
DisplayMetrics dm = resources.getDisplayMetrics();
config.locale = newLocale;
resources.updateConfiguration(config, dm);
this.onCreate(null); // 用于立即刷新界面
}</code></p>

<p>但是这种方式有一些局限性：只能更换本apk内置的资源且受限于语言种数；需要重新create activity等方式才能刷新界面；可能影响程序其他依赖于语言的元素。这种方式属于一种投机取巧的方法，不建议使用。</p>

<p>总结：两步实现，第一步，增加不同语言版本的资源文件夹；第二步，程序内部切换语言。</p>

<h4>方式二：安装主题apk。</h4>

<ul>
<li><p>原理：通过获取其他程序的context来获取皮肤资源。我们知道android程序中要获取drawable、layout等资源，都要通过context.getResources().getXXX的方式。关键就在这儿了，如果我们可以拿到其他程序的context，那么那个程序就可以作为皮肤程序来提供资源给主程序使用了。android中两个程序相互读取数据的条件是：两个程序的共享用户id相同，通过AndroidManifest.xml中的android:sharedUserId属性配置；两个程序签名相同。想要改变皮肤时，改变提供资源的context为皮肤程序的context，然后刷新即可。</p></li>
<li><p>实践：有一点要注意，要保证能正确获取到皮肤包中的资源，需要编译出来的皮肤包与主程序中的R.java文件一致，即资源对应要一致（主程序中有layout、color、drawable、value等多少类资源，皮肤包中也需要有相同数量的资源）。</p></li>
</ul>


<p><code>Context skinContext = createPackageContext(skinPackageName, Context.CONTEXT_IGNORE_SECURITY);    contentView.setBackgroundDrawable(skinContext.getResources().getDrawable(R.drawable.gloal_background));</code></p>

<h4>方式三：使用皮肤资源zip包。</h4>

<ul>
<li><p>原理：直接从文件（SD卡或者data目录）中读取资源文件并解码，然后设置给相关的控件。</p></li>
<li><p>实践：实现方式可以是直接一个包含皮肤资源（图片、控制布局的一些数值文本文件等）的压缩包，通常后缀名被命名为自己独有的名字，比如搜狗的sga，百度的bds等，使用时被解压拷贝到手机存储上的皮肤文件夹里面；也可以是包含在一个单独的apk安装包里面，安装应用皮肤后皮肤压缩包（一般放在皮肤apk的asset目录下）被解压拷贝到data目录下以供使用。</p></li>
</ul>


<p>这种方式需要注意的一个地方就是内存管理的问题。一般是new一些bitmap或者BitmapDrawable之类的对象出来，在不再使用的时候要注意释放。一个思路是参照系统Resources类的管理方式，详细实现方式后面再研究研究。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android中的SharedPreferences陷阱]]></title>
    <link href="http://jcccn.github.com/blog/a-trap-in-sharedpreferences/"/>
    <updated>2012-07-14T16:16:00+08:00</updated>
    <id>http://jcccn.github.com/blog/a-trap-in-sharedpreferences</id>
    <content type="html"><![CDATA[<p>将保存SharedPreferences的xml文件删除了，能够彻底删除对应的SharedPreferences吗？</p>

<p>一次开发过程中，一个功能是需要将程序缓存清除掉，包括SharedPreferences文件。</p>

<p>第一次做的方式是，把相关的文件删除。但是发现有问题：程序退出后，再次进入程序仍然能够读取到应该被删除掉的SharedPreferences的值，但是DDMS查看要删除的pref文件确实都不在了。</p>

<p>为什么文件都不在了还能够取到值呢？</p>

<p>换了另一种清除SharedPreferences的方式：使用SharedPreferences.Editor的commit方法。结果证明，这样做是能够起作用的，调用后不退出程序都马上生效。</p>

<p>既然这样，第一个反应就是取SharedPreferences是首先内存缓存中取的。那为什么重启程序都还能去得到呢？</p>

<p>就进入源代码中看了一下，有几下几个地方可以了解了解：</p>

<p>取SharedPreferences实际上是在ContextImpl这个类中完成的。</p>

<ul>
<li><p>1、context.getSharedPreferences(pref_name, mode)的流程：</p>

<ul>
<li>A 在sSharedPrefs这个map(同步的)中以pref_name为键取SharedPreferencesImp对象sp。如果sp不为空并且对应的pref文件未被异常修改，就返回这个对象。否则进入B。</li>
<li>B 如果sp为空，重新生成一个SharedPreferenceImp对象并且加入到sSharedPrefs这个map中。</li>
<li>C 同步的：从pref文件中解析出map对象并用之替换SharedPreferenceImp对象中原有的存放pref键值对的mMap成员对象。如果pref文件解析异常导致map为null，就保持原有对象而不替换。 如果备份的pref文件(…pref_name.xml.bak)存在，就使用备份文件。</li>
<li>D 返回SharedPreferenceImp对象sp。
注意：sSharedPrefs在程序中是静态的：private static final HashMap sSharedPrefs = new HashMap(); 如果退出了程序但Context没有被清掉，那么下次进入程序仍然可能取到本应被删除掉的值。</li>
</ul>
</li>
<li><p>2、从SharedPreference中取值getString(String key, String defValue)：
从SharedPreferencesImp对象的mMap成员对象中根据key取出相应的对象v。如果取得的对象v为空，返回默认对象defValue；否则，返回对象v。</p></li>
<li><p>3、commit过程：</p>

<ul>
<li>A 在内存中提交，即用要提交的map去刷新已有的mMap对象。如果map对象中某个键的值指向editer对象自身，就代表要移除这个键值对。</li>
<li>B 将步骤A返回的MemoryCommitResult对象加入到写入本地的队列中，写入本地文件。这一步目前是在同一个线程中做的，因为性能表现得很良好。在写入文件前，如果同名文件已经存在，则会原文件重命名为备份文件名，如果写入成功，才删除bak备份文件。</li>
<li>C 通知SharedPreferences的监听状态改变了。返回提交是否内存成功的状态。</li>
</ul>
</li>
<li><p>4、EditorImpl内部类：
内部有一个Map成员对象mModified，用来保存将要提交的pref键值。
apply方法与commit方法的区别：前者先提交到内存中，再异步写到文件，并且不需要返回写入成功与否的状态；后者同步写入内存和文件。</p></li>
<li><p>5、MemoryCommitResult内部类：
用来存放Editor提交到内存的返回状态，包括是否有键值改变、将要写入文件中的map对象，写入文件成功与否等。</p></li>
</ul>


<p>总结一下：要想及时并安全清除SharedPreferences一定要使用Editor去clear并commit，不要直接暴力地删除其xml文件。</p>

<p>测试用的源代码(GBK编码)：<a href="http://www.kuaipan.cn/file/id_80676665698551.htm">http://www.kuaipan.cn/file/id_80676665698551.htm</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java中单例模式的最佳实现——单元素的枚举类型]]></title>
    <link href="http://jcccn.github.com/blog/a-best-singleton-practice-in-java/"/>
    <updated>2012-07-14T16:13:00+08:00</updated>
    <id>http://jcccn.github.com/blog/a-best-singleton-practice-in-java</id>
    <content type="html"><![CDATA[<p>Inspired by Effective Java.</p>

<p>Singleton模式是在编程实践中应用最广泛的几种设计模式之一。以前知道的，实现单例的方法有两种(下面的A、B)。刚刚在读《Effective Java的时候》学到一种新的更好的方法(E)：单元素的枚举类型。同时通过网上资料也知道了其他两种方法(C、D)。最后一种在Java中从1.5版本开始支持，其他语言在验证后说明。</p>

<h4>A.饿汉式(类加载的时候就创建实例)。</h4>

<p>代码如下：</p>

<p><code>public class MaYun {
public static final Mayun instance = new Mayun(); //静态的final的MaYun
private MaYun() {
//MaYun诞生要做的事情
}
public void splitAlipay() {
System.out.println(“Alipay是我的啦！看你丫Yahoo绿眉绿眼的望着。。。”);
}
}
Call：MaYun.instance.splitAlipay();</code></p>

<p>Feature：可以通过反射机制攻击；线程安全[多个类加载器除外]。</p>

<h5>A+.饿汉变种[推荐]</h5>

<p><code>public class MaYun {
private static Mayun instance = new Mayun();
private static getInstance() {
return instance;
}
private MaYun() {
//MaYun诞生要做的事情
}
public void splitAlipay() {
System.out.println(“Alipay是我的啦！看你丫Yahoo绿眉绿眼的望着。。。”);
}
}</code></p>

<h5>A++.饿汉变种(类初始化的时候实例化instance)：</h5>

<p><code>public class MaYun {
private MaYun instance = null;
static {
instance = new MaYun();
}
private MaYun() {
//MaYun诞生要做的事情
}
public static MaYun getInstance() {
return this.instance;
}
public void splitAlipay() {
System.out.println(“Alipay是我的啦！看你丫Yahoo绿眉绿眼的望着。。。”);
}
}</code></p>

<h4>B.懒汉式。</h4>

<p>代码如下：</p>

<p><code>public class MaYun {
private static MaYun instance = null;
private MaYun() {
//MaYun诞生要做的事情
}
public static MaYun getInstance() {
if (instance == null) {
instance = new MaYun();
}
return instance;
}
public void splitAlipay() {
System.out.println(“Alipay是我的啦！看你丫Yahoo绿眉绿眼的望着。。。”);
}
}
Call：MaYun.getInstance().splitAlipay();</code></p>

<p>Feature:延时加载；线程不安全，多线程下不能正常工作；需要额外的工作(Serializable、transient、readResolve())来实现序列化。</p>

<h5>B+.懒汉式变种。</h5>

<p><code>public class MaYun {
private static MaYun instance = null;
private MaYun() {
//MaYun诞生要做的事情
}
public static synchronized MaYun getInstance() {
if (instance == null) {
instance = new MaYun();
}
return instance;
}
public void splitAlipay() {
System.out.println(“Alipay是我的啦！看你丫Yahoo绿眉绿眼的望着。。。”);
}
}</code></p>

<p>Feature:线程安全；效率比较低，因为需要线程同步的时候比较少。</p>

<h4>C.静态内部类[推荐]。</h4>

<p>代码如下：</p>

<p><code>public class MaYun {
private static class SigletonHolder {
private static final instance = new MaYun();
}
public static final getInstance() {
return SigletonHolder.instance;
}
private MaYun() {
//MaYun诞生要做的事情
}
public void splitAlipay() {
System.out.println(“Alipay是我的啦！看你丫Yahoo绿眉绿眼的望着。。。”);
}
Call：MaYun.getInstance().splitAlipay();</code></p>

<p>Feature:线程安全；延迟加载。</p>

<h4>D.双重校验锁[不推荐]。</h4>

<p>代码如下：</p>

<p><code>public class MaYun {
private volatile static MaYun instance;
private MaYun (){}
public static MaYun getInstance() {
if (instance == null) {
synchronized (MaYun.class) {
if (instance == null) {
instance = new MaYun();
}
}
}
return instance;
}
}
</code>
Feature：jdk1.5之后才能正常达到单例效果。</p>

<h4>E.编写一个包含单个元素的枚举类型[极推荐]。</h4>

<p>代码如下：</p>

<p><code>public enum MaYun {
himself; //定义一个枚举的元素，就代表MaYun的一个实例
private String anotherField;
MaYun() {
//MaYun诞生要做的事情
//这个方法也可以去掉。将构造时候需要做的事情放在instance赋值的时候：
/** himself = MaYun() {
* //MaYun诞生要做的事情
* }
**/
}
public void splitAlipay() {
System.out.println(“Alipay是我的啦！看你丫Yahoo绿眉绿眼的望着。。。”);
}
}
Call：MaYun.himself.splitAlipay();</code></p>

<p>Feature:从Java1.5开始支持；无偿提供序列化机制，绝对防止多次实例化，即使在面对复杂的序列化或者反射攻击的时候。</p>

<p>总之，五类：懒汉，恶汉，双重校验锁，静态内部类，枚举。</p>

<ul>
<li>恶汉：因为加载类的时候就创建实例，所以线程安全(多个ClassLoader存在时例外)。缺点是不能延时加载。</li>
<li>懒汉：需要加锁才能实现多线程同步，但是效率会降低。优点是延时加载。</li>
<li>双重校验锁：麻烦，在当前Java内存模型中不一定都管用，某些平台和编译器甚至是错误的，因为instance = new MaYun()这种代码在不同编译器上的行为和实现方式不可预知。</li>
<li>静态内部类：延迟加载，减少内存开销。因为用到的时候才加载，避免了静态field在单例类加载时即进入到堆内存的permanent代而永远得不到回收的缺点(大多数垃圾回收算法是这样)。</li>
<li>枚举：很好，不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。但是失去了类的一些特性，没有延迟加载，用的人也太少了～～</li>
</ul>


<p>以后多推广推广单元素枚举这种更好的单例实现方式。在项目中的代码开始修改实施。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个Android程序中新手引导功能实现方式的变迁]]></title>
    <link href="http://jcccn.github.com/blog/a-feature-guide-on-android/"/>
    <updated>2012-07-14T16:12:00+08:00</updated>
    <id>http://jcccn.github.com/blog/a-feature-guide-on-android</id>
    <content type="html"><![CDATA[<p>最近做的一个项目中，引入了首次进入程序时的显示新手引导的功能，全屏显示，可以手指拖动左右翻页。效果类似于<a href="http://android.taobao.com/">淘宝Android客户端</a>3.0版本中新手引导的效果。</p>

<p>下面说说这个需要全屏的新手引导都经历了一些什么变化吧：</p>

<h4>1、第一阶段：加在首页的PopupWindow上面</h4>

<p><code>private void addFeatureGuide() {
LayoutInflater layoutInflater = LayoutInflater.from(this);
LinearLayout popContentView = (LinearLayout) layoutInflater.inflate(R.layout.popup, null);
PopupWindow popupWindow = new PopupWindow(popContentView, LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
popupWindow.showAtLocation(this.findViewById(R.id.main_root), Gravity.CENTER, 0, 0);
}</code></p>

<p>在onResume的时候调用addFeatureGuide()方法。</p>

<p>这样应该OK了吧？不！Run的时候报错了：</p>

<p><code>FATAL EXCEPTION: main
java.lang.RuntimeException: Unable to resume activity {com.example/com.example.MyActivity}: android.view.WindowManager$BadTokenException: Unable to add window — token null is not valid; is your activity running?
at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3128)
at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3143)
at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2684)
at android.app.ActivityThread.access$2300(ActivityThread.java:125)</code></p>

<p>从错误日志中得出，在activity显示出来之前，拿不到activity将要显示在它上面的window的token。没有了window token，PopupWindow这个寄生的对象也就加不上去了。</p>

<p>那好吧，既然这样，我就在activity显示出来之后再加popupWindow上去吧。先这样试试：</p>

<p><code>mHandler.sendEmptyMessageDelayed(MSG_WHAT_SHOWPOP, 1000);</code></p>

<p>这样Activity将在1秒之后（先假设activity在resume一秒钟之后显示出来了）接收到消息，将popupWindow加上去。
结果，暂时是能够把PopupWindow显示出来。</p>

<p>问题：PopupWindow加上去的时延无法判断。显示太晚，会把首页内容看到之后一段时间才看得到新手引导；太早，同样会出现拿不到window token的问题，导致程序崩溃。所以这种方法不可取。</p>

<h4>2、第二阶段：作为一个单独的Activity，在Welcome之后首页之前显示。</h4>

<p>新手引导作为一个独立的Activity的contentView。Welcome页面完了之后，跳到新手引导的Activity；在用户左右滑动翻到新手引导的最后一页的时候，跳到首页MainActivity。</p>

<p>问题：进入首页需要的时间太久。首页MainActivity是个庞然大物，进入的时候要显示N多界面元素，还要启动几个线程。用户在新手引导滑动完了之后，需要停滞几秒钟才能看到首页。不能忍受！</p>

<h4>3、第三阶段：加在导航栏里面</h4>

<p>导航栏是一个利用WindowManager实现的东西(感觉很心虚)。导航栏是一个独立于Activity之外的东西，在欢迎页面的时候就会去实例化。因此，如果我把新手引导加在导航栏上面，那么，就能在首页显示出来之前把新手导航显示出来，并且在新手导航消失之后马上看到首页(仅仅把新手引导的view remove掉就是)。</p>

<p>问题：导航栏的功能不包括新手引导，不应该把多余的东西加入到导航栏上面。</p>

<h4>4、第四阶段：加在WindowManager上面</h4>

<p>想了一下，为什么前面要把新手引导加到导航栏上面呢？其实是项利用导航栏的某些特性，比如独立于activity，可以在覆盖住整个屏幕。那么，我想要的其实不是导航栏，而是实现导航栏所使用的WindowManager。</p>

<p>既然如此，我就把新手引导放WindowManager里面，实现的地方跟导航栏独立开来，和导航栏是同一个级别的东西。</p>

<p>在首页MainActivity create的时候，我就把新手引导的视图生成，然后加到WindowManger上面。</p>

<p>问题：</p>

<p>A、在新手引导要消失的时候，需要把新手引导的view remove掉，然后让导航栏显示出来。导航栏出来得比较慢，首页下部会显示白色很久然后导航栏才显示。</p>

<p>B、由于新手引导要求全屏，首页又非全屏，在锁屏之后：按下手机解锁键，有状态栏显示；滑动解锁之后，需要重新设置window flag，即使马上调用新手导航view的requestLayout方法，也会出现界面显示出来后突然向上跳一下的效果，体验不好。</p>

<p>C、而且，使用WindowManager这种更偏底层的元素，可能会引发一些未知的风险。</p>

<h4>5、第五阶段：作为首页Activity的一个view</h4>

<p>最后只能这样了，前面的几种尝试，都存在很多缺陷。只能用最原始的方式了。</p>

<p>首页在create的时候，判断是否要显示新手引导。如果要显示，就把新手引导的view生成，然后加到activity里面。</p>

<p>这样做也有一些不好的地方。比如：</p>

<p>首页上界面元素多，新手引导在滑动翻页的时候布局改变的时候，首页控件树中的其他view也会计算，流畅度不够好；</p>

<p>物流、旺旺等后台提示都仍旧会其作用；</p>

<p>在处理onKeyDown，onTrackballEvent等事件的时候，需要判断是否新手引导存在来做处理，增加了复杂度。</p>

<p>虽然最终的方案从功能上来说是最满足需求一个，但是还不完美。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对Android Drawable Resources的研究]]></title>
    <link href="http://jcccn.github.com/blog/researching-about-android-drawable-resources/"/>
    <updated>2012-07-14T16:11:00+08:00</updated>
    <id>http://jcccn.github.com/blog/researching-about-android-drawable-resources</id>
    <content type="html"><![CDATA[<p>最近一次在android开发时想在GridView被按下的时候改变item的图片。可以通过xml配置selector背景选择器来达到，但是有100个item我是不是就要写100个xml呢？肯定不能够这样！就想到通过java代码来实现selector的效果。于是，找到了StateListDrawable这个类，进而进出对Drawable Resources的深入研究。</p>

<blockquote><p>官方链接：<a href="http://developer.android.com/guide/topics/resources/drawable-resource.html">http://developer.android.com/guide/topics/resources/drawable-resource.html</a></p></blockquote>

<p>首先从字面上理解，绘图资源泛指可以画在屏幕上的东西。</p>

<p>绘图资源可以分为以下几类：</p>

<p>1、位图文件(BitmapDrawable)：位图图像文件，支持jpg、png、gif</p>

<p>2、九片式图片(点9)文件(NinePatchDrawable)：可以拉伸的.9.png图片文件</p>

<p>3、图层列表(LayerDrawable)：一组图片,，index越大的画在最顶层</p>

<p>4、状态列表(StateListDrawable)：不同的状态(正常、按下、获得焦点等)对应不同的资源</p>

<p>5、等级列表(LevelListDrawable)：一组绘图，每张绘图制定了不同的等级，只有符合设定的等级的绘图才显示</p>

<p>6、过渡绘图(TransitionDrawable)：内部可以实现两张图片的渐隐渐现切换</p>

<p>7、插入绘图(InsetDrawable)：使用另一个绘图资源，同时指定了其边距</p>

<p>8、裁剪绘图(ClipDrawable)：可以从原资源上切割一部分显示</p>

<p>9、缩放绘图(ScaleDrawable)：对另一个资源进行缩放</p>

<p>10、形状(ShapeDrawable)：包含颜色和渐变的几何图形</p>

<p>11、动画(AnimationDrawable)</p>

<p>12、颜色(Color)：颜色也可以当做绘图资源使用</p>

<p>位图：可以直接使用包含扩展名的文件名或者R引用作为资源ID。使用xml位图来定义一个指向原位图的引用，可以增加一些属性(比如抗锯齿antialias，抖动处理dither)，使用方法和位图图片文件一样。比如：</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;bitmap xmlns:android=”http://schemas.android.com/apk/res/android”
android:src=”@drawable/icon”
android:tileMode=”repeat” /&gt;</code></p>

<p>点9：可以对图片进行伸缩来适用View尺寸的改变。与位图类似，点九也可以创建对应的xml引用文件。比如</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;nine-patch xmlns:android=”http://schemas.android.com/apk/res/android”
android:src=”@drawable/myninepatch”
android:dither=”false” /&gt;</code></p>

<p>图层列表：按照index的顺序来绘制。item必须是<selector>的子类，默认情况下回进行缩放来适应。xml中的定义方式如下：</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;layer-list xmlns:android=”http://schemas.android.com/apk/res/android”&gt;
&lt;item android:drawable=”@drawable/android_red” /&gt;
&lt;item android:top=”10dp” android:left=”10dp”&gt;
&lt;bitmap android:src=”@drawable/android_green”
android:gravity=”center” /&gt;
&lt;/item&gt;
&lt;/layer-list&gt;</code></p>

<p>状态列表：为每个资源item制定不同的状态。在匹配的时候，第一个与制定状态匹配的item被使用到，不一定是最优的，而是第一个。因此，一需要把默认选项放在最后一个位置。定义示例：</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;selector xmlns:android=”http://schemas.android.com/apk/res/android”&gt;
&lt;item android:state_pressed=”true”
android:drawable=”@drawable/button_pressed” /&gt; &lt;!– pressed –&gt;
&lt;item android:state_focused=”true”
android:drawable=”@drawable/button_focused” /&gt; &lt;!– focused –&gt;
&lt;item android:state_hovered=”true”
android:drawable=”@drawable/button_focused” /&gt; &lt;!– hovered –&gt;
&lt;item android:drawable=”@drawable/button_normal” /&gt; &lt;!– default –&gt;
&lt;/selector&gt;</code></p>

<p>级别列表：示例：</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;level-list xmlns:android=”http://schemas.android.com/apk/res/android” &gt;
&lt;item
android:drawable=”@drawable/status_off”
android:maxLevel=”0″ /&gt;
&lt;item
android:drawable=”@drawable/status_on”
android:minLevel=”1″
android:maxLevel=”2″ /&gt;
&lt;/level-list&gt;</code></p>

<p>过渡绘图：只支持最多2个drawable。例如</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;transition xmlns:android=”http://schemas.android.com/apk/res/android”&gt;
&lt;item android:drawable=”@drawable/on” /&gt;
&lt;item android:drawable=”@drawable/off” /&gt;
&lt;/transition&gt;</code></p>

<p>插入绘图：示例：</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;inset xmlns:android=”http://schemas.android.com/apk/res/android”
android:drawable=”@drawable/background”
android:insetTop=”10dp”
android:insetLeft=”10dp” /&gt;</code></p>

<p>裁剪绘图：通过设置level来决定裁剪的大小。默认的是0(可见区域为0)，全部裁剪的level是10000。定义的示例：</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;clip xmlns:android=”http://schemas.android.com/apk/res/android”
android:drawable=”@drawable/android”
android:clipOrientation=”horizontal”
android:gravity=”left” /&gt;</code></p>

<p>缩放绘图：定义如下：</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;scale xmlns:android=”http://schemas.android.com/apk/res/android”
android:drawable=”@drawable/logo”
android:scaleGravity=”center_vertical|center_horizontal”
android:scaleHeight=”80%”
android:scaleWidth=”80%” /&gt;</code></p>

<p>几何形状绘图：根节点为<shape>，包含的属性为shape(rectangle矩形|oval椭圆|line线条|ring环形)。当shape属性为ring时还有innerRadius、innerRadiusRatio、thickness、thicknessRatio、useLevel。它支持以下图形的组合：</p>

<p><corners>圆角，在矩形的时候生效。注意bottomLeftRadius是右下角，bottomRightRadius是左下角。</p>

<p><gradient>渐变。包含属性：angle,渐变的方向角度，必须是45的倍数，默认为0，即从左至右，逆时针计算角度；centerX,x的渐变中心位置，0~1.0；centerY，y方向的渐变中心位置；startColor、centerColor、endColor分别是渐变的开始、中间、结束颜色；type，渐变的类型(linear线性|radial中心放射性|sweep扇形)；gradientRadius，渐变半径，中心放射类型的渐变时生效；useLevel，是否作为等级绘图使用。</p>

<p><padding>内边距。left、top、right、bottom四个方向。</p>

<p><size>大小尺寸。height、width。</p>

<p><solid>填充颜色。color。</p>

<p><stroke>描边。包含属性：width，描边的粗细；color，描边的颜色；dashGap，dashWidth，两个一起使用，使用虚线描边，分别指虚线每条线
的间距和长度。</p>

<p>定义如下：</p>

<p><code>&lt;?xml version=”1.0″ encoding=”utf-8″?&gt;
&lt;shape xmlns:android=”http://schemas.android.com/apk/res/android”
android:shape=”rectangle”&gt;
&lt;gradient
android:startColor=”#FFFF0000″
android:endColor=”#80FF00FF”
android:angle=”45″/&gt;
&lt;padding android:left=”7dp”
android:top=”7dp”
android:right=”7dp”
android:bottom=”7dp” /&gt;
&lt;corners android:radius=”8dp” /&gt;
&lt;/shape&gt;</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读书-《把时间当作朋友》by李笑来]]></title>
    <link href="http://jcccn.github.com/blog/reading-befriend-with-time/"/>
    <updated>2012-07-14T16:10:00+08:00</updated>
    <id>http://jcccn.github.com/blog/reading-befriend-with-time</id>
    <content type="html"><![CDATA[<p>时间管理，管理的到底是什么？不是时间，而是我们自己，让自己行动起来。</p>

<p>人不是没有时间，而是自己太懒惰，缺乏控制自己大脑的心智。
不用考虑后果太多，在做了一个规划之后，就坚定地向前冲。
前进的过程，没有必要考虑太多的得失，在做了之后，合适与否、是得是失自然有结果来证明。
算算自己时间的价值，自然就知道自己应该去珍惜时间了，浪费一分钟就是浪费了多少金钱？
克服天生的懒惰，让计划从今天开始执行而不是明天。
总结、分享，在传授的过程中提升自己。
人习惯于好了伤疤忘了痛，对于痛苦的事情总是有选择去遗忘的天生习性。
Everything, do right NOW !</p>

<blockquote><p>“最优秀的销售之所以最优秀，在于他们会选择产品。”因为，如果一个产品确实能够满足人们切实的需求，并且以合适的价格出售，那么，理论上所有的“销售技巧”都是不必要的，只要恰当清楚的展示就可以了。需要“推销”的产品，通常不是什么好产品。</p>

<p>所有的学生提问，最终都是源于人类史上所有的人都共同拥有的弱点：懒惰。</p></blockquote>

<p>然而，提问的人，是因为经过思考；不提问，因为懒于去思考。思想的懒惰，荒废。</p>

<blockquote><p>因“不知道学习有什么用”而拒绝学习的人，会在接下来的日子里虚度光阴无数，哪怕他们天天“科学地”指定计划，编制“人物列表”。与之相反，因“不知道学习有什么用”而选择努力学习的人，每时每刻都充满了收获，并且会在将来的某一天获得更多的“意外”收获，哪怕他们可能显得“漫无目的”，——真的是天壤之别。</p></blockquote>

<p>这种态度，该学习了！回想自己的零零总总，也制定了无数的计划，无数的时间表，无数的行事规则，但是想找出能够坚持下来的，却找不出。</p>

<blockquote><p>对于上司某些时候的“愚蠢”，其实是因为他们做的事情多，所以暴露出来的缺点就越多。
具有强大心智力量的人面对“上司的愚蠢”是这样思考的：</p></blockquote>

<ul>
<li>他的这个缺点是否会阻碍团队目标的实现？</li>
<li>如果是，是否有补救的余地？</li>
<li>如果能补救，那么补救的方法是什么？</li>
<li>如果确定不能补救，那么作为团队成员，你能否有效地提供帮助？</li>
<li>如果你能够提供有效的帮助，那就想出一个有效的方式去沟通，拜年歌提供帮助——因为其实这是团队的义务之一。</li>
<li>如果你不能提供有效的帮助，那作为团队成员，有没有其他什么可行的建议，或者可实施的有效方案？</li>
<li>如果有，那就想办法提交，并推进实行。</li>
<li>如果没有，那就暂时闭嘴——反正不是抱怨。</li>
<li>如果不是，那就应该平静对待。</li>
<li>如果能平静对待，那就应该专心地做自己的工作，完成自己的贡献。</li>
<li>如果不能平静对待，不要抱怨，应该安静地离开。</li>
</ul>


<p>所有的抱怨，其实都只是自己懒惰的借口而已。借口，借口，让自己更加懒惰，无限的恶性循环。</p>

<blockquote><p>往往不是有兴趣才能做好，而是做好了才有兴趣。做得多了，自然就擅长了；擅长了，自然做得比别人好；做得比别人好，兴趣就大起来了，而后就更喜欢，更擅长，更……良性循环。</p></blockquote>

<p>浮躁的年代，时时在埋怨自己做的事情并不是自己感兴趣的。其实应该想想，我努力了吗？我足够付出了吗？我客服懒惰让这些事情都做好了嘛？我是真的不感兴趣还是因为我没有做好而回避？是不是我换了“感兴趣”的工作，就做好了？会不会“感兴趣”的工作某天也会成为“不感兴趣”？——不感兴趣，这又是借口。没兴趣，往往是结果而已，却被当成了不去做好的理由。让大把的时间在埋怨工作不感兴趣，还不如别想太多，做好当下！</p>

<blockquote><p>掌握了“推迟满足感”之技巧的人早就因此获得极大的、只有少数人才会获得的利益的经历。于是，他们最终表现为比绝大多数人“更有耐心”——甚至，惊人的耐心。这些耐心被用来不动声色地承受更多的打击和挫折，轻松坦然地面对更多的威逼和利诱。</p></blockquote>

<p>生物总是习惯于趋利避害，人也不例外。对于眼前的利益和满足，对我们的吸引力更大，甚至“拿到手的钱才是真正的钱”。具有长期规划的人，可以为了自己既定的目标，放弃眼前的没好与种种诱惑，或者无视诱惑。</p>

<blockquote><p>常听说，“最可怕的敌人就是你自己”，这句话如果有道理的话，那个“最可怕的敌人”实际上应该指的是“你那无法控制的懒惰”。</p></blockquote>

<p>为什么喜欢懒惰，因为懒惰实行起来很让自己马上感到满足和畅快，是一种不需要改变现实的心理，不需要付出任何努力。当尝到不懒惰带来的种种更多的满足感的时候，也许我们就不再喜欢这种懒惰的状态。</p>

<blockquote><p>第一步就是要搞清楚自己的时间都用来干什么了？以下这几组练习会让每一个人心惊肉跳的。</p></blockquote>

<ul>
<li>第一组练习（这个联系只需要你用一个下午就够了）

<ul>
<li>(一)认真回忆一下并记录昨天你都做了什么。逐条记录下来，前面写上标号，后面标注出做那件事情所花费的时间。</li>
<li>(二)认真回忆一下并记录前天你都做了什么。同样逐条记录下来。</li>
<li>(三)认真回忆一下并记录大前天你都做了什么。同样逐条记录下来。</li>
</ul>
</li>
<li>第二组练习（这组练习只需要你用一个下午就够了）

<ul>
<li>(一)认真回忆一下并记录上一周你都做了什么。</li>
<li>(二)认真回忆一下并记录上一个月你都做了什么。</li>
<li>(三)认真回忆一下并记录上一个季度你都做了什么。</li>
<li>(四)认真回忆一下并记录过去的一年里你都做了什么。</li>
</ul>
</li>
<li>第三组练习

<ul>
<li>(一)用一个星期时间，每天晚上回忆并记录当天你都做了什么。</li>
<li>(二)用一个星期时间，每天随时记录你刚刚做完的事情花费了多少时间。</li>
</ul>
</li>
</ul>


<p>也许这听起来确实让人心惊肉跳，但是相信自己，自己可以做到。做完了这些自我审视，才明白自己的过去和现在都是什么样的人生境况，自己是否足够努力，自己如何才能去提高，如何培养自己的自信。相信自己，从上面的几条做起。克服懒惰，现在开始。</p>

<blockquote><p>面对无法亲身体验的知识，人们往往会心存恐惧，因为人们害怕未知。而群体面临无法体验的知识，往往会表现为疯狂。有句话非常精辟，“很多时候，人们的善良出自软弱，而他们的残暴只不过来自于恐惧。”</p></blockquote>

<p>人总是习惯于喜欢确定的东西。面对不确定性，充满着恐惧。无法亲身体验，就不确定这种知识是否可靠，是否隐藏这某种无法预知的风险，而宁愿去选择另外一些回报较小但是结果确定的方向。</p>

<blockquote><p>无论如何，都不要也不应该用别人的错误惩罚自己，那么做不仅不对，而且愚蠢。</p></blockquote>

<p>那样做只是暂时的麻痹自己和求得暂时的心里平衡，根本就不能起到任何作用。如同，不能因为司机会为撞到行人的错误而负责就因此可以随便横穿马路。</p>

<blockquote><p>每道题，都肯定对应着某个学习难点。一道题错了，就是一定有哪个学习难点没搞清楚，赶紧记下来，之后要全面补习。</p></blockquote>

<p>每个细节往往都是一个人综合能力的反应。一件小事，也许就事论事来看不算什么。但是，如果千千万万的小事情累加在一起呢？这绝对可以就此断定一个人到底是怎样，到底有多优秀。有句话意思是说优秀的人做任何事情都做得很好。这句话有一定的道理，这件事我做不好，另一件事也做不好，那说明我肯定欠缺些什么，肯定应该去提高自己了。永远不要忽视自己的细节。</p>

<blockquote><p>教是最好的学习方法。</p></blockquote>

<p>乐于分享，勤于分享。跟别人分享的时候，更能发现自己的不足。如果不能跟别人讲清楚或者不能让别人信服，说明在这些点上自己做得还不够好，还有待提高。</p>

<blockquote><p>“我拥有的是不多，但是比你多！这样我就很快乐。”细观很多人所定义的“成功”，归根结底其实只要四个字就可以概括——“高人一等”，即，市井语言中的所谓“牛x”。不能做到比谁都牛，那么最好“一人之下万人之上”，退而求其次也起码应该是比大部分人或者很多人牛。</p></blockquote>

<p>这种方式来定义成功，确实显得很尴尬和浮躁。用这种定义，某个人的成功必定是建立在其他人的不成功之上。好似把人分为三六九等，“成功”的人才是最上层。成功，其实仅仅是达到自己的想法而已，哪有那么复杂？</p>

<blockquote><p>努力往往真的会改变一个人的运气。将近两千五百年前，塞涅卡（罗马哲学家、悲剧作家、政治家）就把这件事儿说得非常清楚“所谓的幸运就是当你准备好了的时候机会来了。”（Luck is what happens when preparation meets opportunity.）</p></blockquote>

<p>充分的准备碰上机会，那就ok了。看着机会来了的时候，不管其他，一个字——上！在这种不断的“上”的过程中，我们也是在以一种更高效的方式来为自己准备。上的次数多了，机会来了的时候上起来就容易了。</p>

<blockquote><p>某种意义上，尽管绝绝大多数人不愿意承认，他们所谓的“友谊”实际上只不过是“交换关系”。可是，如果自己拥有的资源不够多不够好，那么就更可能变成“索取方”，做不到“公平交换”，最终成为对方的负担。这样的时候，所谓的“友谊”就会慢慢无疾而终。也有持续下去的时候，但更可能是另一方在耐心等待下一次交换，以便实现“公平”。</p></blockquote>

<p>所以，拓展人脉的最好方式就是让自己掌握更多更好更优质的资源。当手中能够支配的资源的种类和数量很多的时候，有求于我的人也就越多，人脉自然而然就找上门了。与其花费很多时间去讨好别人，还不如将这些时间用在积累自己的资源上面。人脉的广度和深度跟自己能够提供的资源的种类和数量成正相关。</p>

<blockquote><p>正真的关心最终只有一个表现：为之心甘情愿地花费时间，哪怕“浪费”时间。……</p></blockquote>

<ul>
<li>专心做自己可以提升自己的事情；学习并拥有更多更好的技能；成为一个值得交往的人；</li>
<li>学会独善其身，以不给他人制造麻烦为美德；用你的独立赢得尊重；</li>
<li>除非有特殊原因，应该尽量回避那些连在物质生活上都不能独善其身的人；那些精神生活上都不能独善其身的，就更应该回避了——尽量甄别起来比较困难；</li>
<li>真正关心一个朋友的意思是说，你情愿在他身上花费甚至浪费更多的时间；</li>
<li>记住，一个人的幸福程度，往往取决于他多大程度上可以脱离对外部世界的依附。</li>
</ul>


<p>看看自己，是否正真的关心朋友，从朋友那里得到那么多的帮助，回报了朋友多少帮助？</p>

<blockquote><p>当荒谬本身荒谬到一定程度的时候，信奉者的人数可能开始不仅与荒谬程度同步增加，而且可能会一荒谬程度作为指数戏剧性地增加。</p></blockquote>

<p>尤其在所处的这个严重缺乏信任和良知的社会，人们宁愿去选择那些荒谬的观点。</p>

<blockquote><p>卡尔·马克思认为，“资源的配置，应该在最无愧于和最适合人类本性的条件下进行。”在用“劳动价值论”和“剩余劳动价值论”解释自己对世界的观察之后，他开始幻想，对这个世界来说：“你不是资源稀缺么？没关系，别看现在是这样的，但是，早晚有一天，总会物质极端丰富；到那时候，人们就可以各取所需，按劳分配了！”事实上，马克思去世120多年后的今天，物质已经相对极端丰富，但是，我们看到的事实是，物质依然稀缺并且依然分配不均，而且贫富差距也只有越来越大的趋势。</p></blockquote>

<p>在面对资源稀缺的问题的时候，面对这个几乎无法解决的问题的时候，应该正视这种问题，正式正态曲线的资源分布规律。而不是去YY，去沉醉于自己的幻想中，更不应该把这种回避问题的态度传染给他们。宇宙的物质是守恒的，在某一个区域的资源是在增加，但是对资源的需求也在增加，资源/需求的比例总是在一个比较平衡的点的。正视资源缺乏的问题，去提高资源利用的效率吧！</p>

<blockquote><p>不再使用“优点”、“缺点”这种明显带有褒贬含义的词，却而代之的是完全中性的“特点”，所以很容易做到心平气和地对待他人的各种特点。并且，这种方法背后有更深的思考。因为很多的时候，所谓的“优点”和“缺点”是相对的。……最后一个方法是：适当地放纵一下自己。承认自己是一个有缺点的人是心智获得解放的重要前提。真实的情况是，没有缺点的就不是人。</p></blockquote>

<p>当不再把别人和自己的特点当成是优点或者缺点的时候，发现自己的心胸和肚量一下子就开阔起来了。</p>

<blockquote><p>时间不一定就是金钱。毕竟不是每个人都有能力把时间转换成金钱，也不是所有人都可以把时间转换成同等金额的金钱。拿出纸笔、列一列，然后问问自己，“我的时间究竟可以标价多少？”——这就是一个人决心不在浪费时间的最有效的起点和动力。只有爱惜才可能产生节约的动力。</p></blockquote>

<p>算一算，以一个月薪6K的人来算，每个月平均工作时间算22天，每天8小时，那时间与金钱的比例就是：每天273元，每小时34元，每分钟0.57元，每秒钟1分钱。所以，浪费一分钟就是浪费了将近6毛钱，浪费一小时就是34元钱，这样还不珍惜？</p>

<blockquote><p>1)人们还普遍相信他们在明天会拥有比今天更多的金钱；2)人们普遍相信自己明天会有更多的时间。……在这两种理论上明显的曲解中，人们对时间的曲解程度远远高于对金钱的曲解程度。……这就解释了为什么大多数人做事拖拉。他们不是没有勤奋的意愿，只不过是被自己的大脑所限制，以为他们在将来有足够的时间去做自己想要的事情。</p></blockquote>

<p>任何说明天会怎么怎么样，明天要怎么怎么样，以后一定要怎么怎么样的，一定会无疾而终。和明天说再见，和今天握手！</p>

<blockquote><p>Extra:</p>

<p>该书第三版下载 <a href="http://code.google.com/p/befriend-with-time/">http://code.google.com/p/befriend-with-time/</a></p>

<p>李笑来的博客：<a href="http://www.lixiaolai.com/">http://www.lixiaolai.com/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于自己]]></title>
    <link href="http://jcccn.github.com/blog/about-me/"/>
    <updated>2012-07-14T15:00:00+08:00</updated>
    <id>http://jcccn.github.com/blog/about-me</id>
    <content type="html"><![CDATA[<p>常常被人称作春哥，虽然多是一些年龄比我大见识比我广的朋友。</p>

<p>一个只有小半瓶水到处晃荡的程序员，浮浮沉沉。</p>

<p>这些年，稀里糊涂，大学4年在脸部和屏幕的缝隙间流走，收获了一帮朋友，手艺活倒学得少些。</p>

<p>噗啦噗啦，跟着创过业，经历了艰辛和喜悦，但是还是抵挡不住人性最终的规律。</p>

<p>异地着，享受这分离和相聚的苦中有乐。</p>

<p>工作着，看着自己的不足，自卑着，惭愧着，觉得对不起所在的位置。恶性循环着，在自责中重复。</p>

<p>总是想把什么都抓住，强迫症般地分不清主次，想把什么事情都昨晚做美，常常因小失大，顾此失彼。</p>

<p>恋旧，感慨童稚的年代没有享受和培养生活，把“如果以前……”挂在嘴边，后悔荒废了什么没有做什么却又做了什么。</p>

<p>浮躁着，以前常说自己其实感兴趣的不是写程序和搞技术，而是创造产品。然而，某些时候却是自己写得出很好的代码，还把熬夜写代码当成家常便饭。产品，那么遥远。也许，仅仅是疲于生活的压力和与生俱来的惰性，不愿意去写代码的借口。有编码的时间，却在幻想中被浪费，本末倒置地YY着产品……</p>

<p>知行不能合一，思维在摇晃，过得不如意，事事不顺心不顺眼。</p>

<p>心胸时时狭隘，看到身边人的优秀，总在想着自己相差好远，油然嫉妒。其实，这与我何关？我不会因此失去什么，反而应该因身边人的优秀而欣慰。</p>

<p>计划一个接着一个，然而实行下来的，却还真找不出来。</p>

<p>做着一些无关紧要可做可不做的事情，耽误了正事，还在给自己找各种台阶下。</p>

<p>消极地活着，宅着，懒于和朋友交流友谊，懒于对亲人加以关心，懒于去改变现实，却在现实的打击中停滞伤感。</p>

<p>…………</p>

<p>数落着各种不是，是不是应该尝试着改变些什么？</p>

<p>想的东西，总要用行动来将它实现吧？</p>

<p>至少目前还是程序员，应该多想想做做，干好自己的本职工作吧？</p>

<p>技术水平不够，是不是应该学习吧，实践吧？</p>

<p>如何学好呢，是不是要多实践，多总结，做分享吧？</p>

<p>想要创新？先模仿吧！当能够把模仿的事情做得顺手拈来，创新难道不是水到渠成的吗？</p>

<p>好的，现在就开始行动，没问题了吧！</p>

<p>思所至，行所达！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test post]]></title>
    <link href="http://jcccn.github.com/blog/test-post/"/>
    <updated>2012-07-06T21:35:00+08:00</updated>
    <id>http://jcccn.github.com/blog/test-post</id>
    <content type="html"><![CDATA[<p>What you see is a test post for my new blog on Github.</p>

<p>I will write some blogs about techniques here.</p>
]]></content>
  </entry>
  
</feed>
